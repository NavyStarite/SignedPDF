/*
 *                                                     ????
 *                                                   ,??????
 *                                                  @???????? ??,
 *                                               ??????????????????
 *                                             ??????????????????????
 *                                          ,@????????????????   ????
 *                                       ,????????????????????   ?????
 *                                    ,???????????????????????????????????
 *                                 ,@????????????????????????????????????????
 *                                ?????????????????????????????????????????????
 *                              ,????????????????????????????????????``?????????
 *                             ?????????????????????????                      ???
 *                           ,???????????????????????
 *                          ?????????????????????????@
 *                         ???????????????????????????
 *                        ????????????????????????????U
 *                       ??????????????????????????????
 *                      ???????????????????????????????
 *                     ??????????????????????????????????
 *                     ??????????????????????????????????@
 *                    ?????????????????????????????????????
 *                   ]??????????????????????????????????????
 *    ??             ????????????????????????????????????????
 *    ??            ]????????????????????????????????????????
 *    ??            ?????????????????????????????????????????
 *    ??            ?????????????????????????????????????????
 *    ??            ?????????????????????????????????????????L
 *    ??L           ?????????????????????????????????????????[
 *     ??           ??????????????????????????????????????????
 *     ??@          ??????????????????????????????????????????
 *      ???         ]?????????????????????????????????????????
 *       ??@         ?????????????????????????????????????????
 *        ????       ]????????????????????????????????????????
 *          ????      ????????????????????????????????????????
 *            ????     ???????????????????????????????????????
 *              "????, ]?????????????????????????????????????
 *                  ???????????????????????????????????????????,
 *                      "?????????????????????????????????????????

 */
package firmarpdf;
import java.io.FileOutputStream;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.util.HashMap;

/**
 * Clase capaz de generar un par de claves RSA y de asegurar adecuadamente la clave privada (mediante un password)
 */
public class GeneradorDeClaves 
{

	//HashMap que almacena el par de claves generado con un password (o key) de identificacion.
	//private HashMap<String, KeyPair> claves;

	//generador de claves
	private KeyPairGenerator generador;
        private KeyPair llaves;

	public PrivateKey GeneradorDeClaves() throws NoSuchAlgorithmException
	{
		generador = KeyPairGenerator.getInstance("RSA");
		generador.initialize(2048);
		llaves = generador.genKeyPair();
            return llaves.getPrivate();
	}

	/**
	 * Genera una par de claves (clave privada y clave publica)
	 * @param password - password con la cual se identificara el par de claves generados
	 */
	public KeyPair generarClave() throws NoSuchAlgorithmException{
                generador = KeyPairGenerator.getInstance("RSA");
		generador.initialize(2048);
		KeyPair par=generador.genKeyPair();
            return par;
	}

	/**
	 * Exporta una clave publica
	 * @param rutaClavePublica - ruta del archivo en el cual se escribira la clave publica
	 * @param passwordKeyPair - identificador de la clave publica
	 * @throws Exception - Lanza excepcion si no se finaliza la exportacion correctamente
	 */
	public void exportarClavePublica(String rutaClavePublica, String passwordKeyPair) throws Exception
	{
		KeyPair parDeClaves = llaves;

			FileOutputStream fos = new FileOutputStream(rutaClavePublica);
			fos.write(parDeClaves.getPublic().getEncoded());
			fos.close();

	}

	public KeyPairGenerator getGenerador() {
		return generador;
	}

	public void setGenerador(KeyPairGenerator generador) {
		this.generador = generador;
	}
        
        public static void main(String[] args) throws NoSuchAlgorithmException {
           GeneradorDeClaves k = new GeneradorDeClaves();
            System.out.println(k.generarClave().getPrivate());
    }

}
